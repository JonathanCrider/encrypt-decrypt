# GLOBALS

# COLORS
NC='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
GREY='\033[0;37m'
YELLOW='\033[1;33m'

# Encryption algo (array to treat each arg separately in the command)
ENCRYPTION=(-aes-256-cbc -pbkdf2 -iter 100000 -salt)

# check for required program(s) and environment
hasRequirements() {
  # return 0 === true
  openssl=$(openssl version)
  echo $openssl

  zsh=$ZSH_VERSION
  echo "ZSH $zsh"

  if [[ ! $openssl ]]
    then
      printf "\nplease install openssl, then try again\n"
      return 1 # Return non-zero integer to indicate fail (0 is successful in bash/zsh, any other number is failure)
  fi

  if [[ ! $zsh ]]
    then
      printf "\nplease switch to ZSH shell, then try again\n"
      return 1
  fi

  echo "Requirements met, continuing...\n"
}

## ENCRYPT ##
#############

# encrypts file, takes [ input pathway, output pathway ]
# Usage: encrypt /Users/you/file/path/fileName.txt /Users/you/file/path/encryptedFileName.txt

encrypt() {
  # VARIABLES
  INPUT_FILE=$1
  OUTPUT_FILE=$2

  hasRequirements || return 1

  # FIRST CHECK IF FILE EXISTS AT PATH
  if [[ ! -a ${INPUT_FILE} ]]; then
    printf "\n${RED}File does not exist at:${NC} $INPUT_FILE"
    return 1
  fi

  # CHECK IF VARIABLES ARE CORRECT
  printf "\n${CYAN}Output (encrypted file) Pathway:${NC} $OUTPUT_FILE"
  printf "\n${YELLOW}Is this ${CYAN}path/filename${YELLOW} correct? ${GREY}[y/n]: "
  read -E -s -k 1 "ans"
  if [[ "$ans" != "y" ]]
    then
      printf "\n\n${CYAN}**Please try again with correct filepaths**\n\n${RED}File not encrypted, exiting script...\n\n"
      # read -t 2
      return 1
    else echo '' # puts next section on a new line
  fi

  # Encrypt file
  openssl enc ${ENCRYPTION[@]} -e -in $INPUT_FILE -out $OUTPUT_FILE
  output=$?
  
  # Fail
  if [[ output -ne 0 ]]
    then
      echo "\n${RED}File not encrypted, exiting script...\n\n${NC}"
      return 1
  fi

  # Success
  outpath=$(dirname ${output})
  if [[ "$outpath" == "."]]
    then
      outpath=$PWD
  fi
  echo "\n${CYAN}File ${NC}$OUTPUT_FILE\n${CYAN}encrypted successfully in directory: ${NC}$outpath"
  echo "\nOpening directory..."
  open $outpath &>/dev/null
}

## DECRYPT ##
#############

# decrypts file, takes [ input pathway, output pathway ]
# Usage: decrypt /Users/you/file/path/encryptedFileName.txt /Users/you/file/path/decryptedFileName.txt

decrypt() {
  # VARIABLES
  INPUT_FILE=$1
  OUTPUT_FILE=$2

  hasRequirements || return 1
  
  # FIRST CHECK IF FILE EXISTS AT PATH
  if [[ ! -a ${INPUT_FILE} ]]; then
    printf "\n${RED}File does not exist at:${NC} $INPUT_FILE"
    return 1
  fi

  # CHECK IF VARIABLES ARE CORRECT
  printf "\n${CYAN}Output (decrypted file) Pathway:${NC} $OUTPUT_FILE"
  printf "\n${YELLOW}Is this ${CYAN}path/filename${YELLOW} correct? ${GREY}[y/n]: "
  read -E -s -k 1 "ans"
  if [[ "$ans" != "y" ]]
    then
      printf "\n\n${CYAN}**Please try again with correct filepaths**\n\n${RED}File not decrypted, exiting script...\n\n"
      # read -t 2
      return 1
    else echo '' # puts next section on a new line
  fi

  # Decrypt file
  openssl enc ${ENCRYPTION[@]} -d -in $INPUT_FILE -out $OUTPUT_FILE
  output=$?
  
  # Fail
  if [[ output -ne 0 ]]
    then
      echo "\n${RED}File not decrypted, exiting script...\n\n${NC}"
      return 1
  fi

   # Success
  outpath=$(dirname ${output})
  if [[ "$outpath" == "."]]
    then
      outpath=$PWD
  fi
  echo "\n${CYAN}File ${NC}$OUTPUT_FILE\n${CYAN}decrypted successfully in directory: ${NC}$outpath"
  echo "\nOpening directory..."
  open $outpath &>/dev/null
}
